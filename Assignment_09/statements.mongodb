db.createCollection( "students" );
// Options for createCollection
// - capped: Create capped collection (fixed size, overwrites old entries)
// - size: Size of collection in bytes
// - max: Max number of docs in collection

// Insertion
db.students.insertOne( 
{
	name: "Shubham Panchal" , 
	age: 20,
	attendance: 89,
	place: "Pune",
	department: "CE",
	marks: {
		insem: 123,
		endsem: 320
	},
	skills: [ { name: "c++" , rating: 2.5 } , { name: "rust" , rating: 3.4 } ]
} ) ; 
db.students.insertMany( [
{
	name: "Kaustubh Netke" , 
	age: 21,
	attendance: 75,
	place: "Jalgoan",
	gender: "Male",
	department: "CE",
	marks: {
		insem: 100,
		endsem: 300
	},
	skills: [ { name: "dart" , rating: 1.5 } , { name: "python" , rating: 3.9 } ]
} , 
{
	name: "Advait Naik" , 
	age: 20,
	attendance: 93,
	place: "Mumbai",
	gender: "Male",
	department: "IT",
	marks: {
		insem: 149,
		endsem: 330
	},
	skills: [ { name: "java" , rating: 4.5 } , { name: "rust" , rating: 2.4 } ]
} , 
{
	name: "Pranali Naik" , 
	age: 24,
	attendance: 82,
	place: "Pune",
	gender: "Female",
	department: "IT",
	marks: {
		insem: 90,
		endsem: 310
	},
	skills: [ { name: "c" , rating: 2.1 } , { name: "assembly" , rating: 4.4 } ]
} ] );


// Updation
// Options
// - upsert: Insert new document if no document found
// - multi: Updates multiple documents
db.students.updateOne(
	{
		name: "Pranali Naik" , 
	} ,
	{ $set: { 
		attendance: 92 , 
		marks: {
			insem: 100 , 
			endsem: 320
		}
	} }
) ;
db.students.updateOne(
	{
		name: "Rahul Jadhav" , 
	} ,
	{ $set: { 
		attendance: 92 , 
		marks: {
			insem: 100 , 
			endsem: 320
		}
	} } , 
	{
		upsert: true
	}
) ;
db.students.updateMany(
	{
		department: "CE"
	} , 
	{ $push: {
		skills: { name: "kotlin" , rating: 3.3 }
	  } }
);

// Reading
db.students.find() ; 
db.students.find().pretty() ; 

db.students.find(
{
	department: { $eq: "CE" } , 
	"marks.insem": { $gt: 120 }
} ) ;
db.students.find(
{
	$and: [ 
		{ $or: [ { department: { $eq: "CE" } } , { department: { $eq: "IT" } } ] }, 
		{ "marks.insem": { $gt: 120 } }
	]
} ) ; 
db.students.find(
{
	place: { $in: [ "Pune" , "Mumbai" ] }
} ) ;
db.students.find(
{
	"skills.name": "java" ,
	"skills.rating": { $gt: 4 }
} );
db.students.find(
{
	"skills.rating": { $all: { $lt: 3 } }
} );
db.students.find(
{
	"skills.name": { $all: [ "c" , "assembly" ] }
} ) ;

// Deleting
db.students.deleteOne(
{
	"name": { $eq: "Pranali Naik" }
} );
db.students.drop();

// Indexes
// createIndex options:
// unique: Unique indexes do not store duplicate values of the indexed field
// sparse: Sparse indexes include only those documents which have the indexed field

db.students.find( { attendance: { $gt : 90 } } ).hint( "attendance_1" ).explain( "executionStats" ) ;

db.students.createIndex( { "attendance": 1 } ) ; 
db.students.createIndex( { "place": 1, "attendance": 1 } , { unique: true } ) ;